' Gambas class file

' Typoo versi 0.3 BETA --------------------------------------------
' Small software to learn fast typing
' 
' Developers: --------------------------------------------------------
' Programmer : Kusuma Negara <deny.krishna108@gmail.com>
' Artwork Designer : Hamzah Fahrudin <karangdesaku@yahoo.co.id>
' Package Maintainer : Damar Riyadi <tldm217@gmail.com>
' License : GPL GNU General Public License Version 2
'
' coded in Gambas 2.22 on Kubuntu 11.10 machine
'
' ---------------------------------------------------------------------------------------
' "Diluar sana orang bisa berbagi "emas". Meski saya cuma bisa berbagi "kerikil",
' setidaknya hal itu tidak mengurangi semangat berbagi saya untuk teman - teman
' semua"
' 
' Semoga Aplikasi ini bisa bermanfaat untuk dunia pendidikan di Indonesia :)
' 
' 
' Thanks to:
' GAMBAS Creator
' ---------------------------------------------------------------------------------------

PUBLIC __text AS String         
PUBLIC __start_type AS Boolean       
PUBLIC __pos AS Integer
PUBLIC __char AS String
PUBLIC __error AS Integer
PUBLIC __type_count AS Integer
PUBLIC __time AS Integer
PUBLIC __start_time AS Date
PUBLIC __stop_type AS Boolean
PUBLIC __mulai_ngetik AS Boolean
PUBLIC __correct_typing AS Boolean
PUBLIC __is_capslock_on AS Boolean

PUBLIC __mode_typoo AS Integer
PUBLIC tuts_number AS Integer

'PUBLIC __virtkey AS String[]
'PUBLIC __type_sound AS Sound

PUBLIC key_function AS String = "4100,4097,4096,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4134,4104,4102,4112,4118,4103,4113,4119,4114,4115,4117,4116,4133,4129,4179,4131"
PUBLIC func_array AS String[]

PUBLIC SUB _new()
  info_char__.Text = ""
  type_here__.SetFocus
  fill_tutorial_mode
  '__type_sound = NEW Sound("type.wav")
  init_key_function
  ME.Center
  ME.Show
END

PUBLIC SUB fill_tutorial_mode()
  WITH typoo_mode__
    .Add("Default Mode", 0)
    .Add("Training Mode", 1)
  END WITH 
  __mode_typoo = 0
END

PUBLIC SUB open_file___Click()
  WITH Dialog
  .Title = "Select tutorial file..."
  .Filter = ["*.txt", "Text File"]
  .Path = User.home 
  IF .OpenFile(FALSE) THEN RETURN
  __text = Trim((File.Load(.Path)))
  END WITH 
  
  board__.Text = __text
  char_count__.Text = Format(Len(__text), "#,##")
  null_info
END

PUBLIC SUB detect_capslock()
  
  'this code take from Stefano Palmeri post in gambas forum (http://gambasrad.org/zforum/view_topic?topic_id=1685)
  
  DIM sShellOutput AS String
  DIM iKeyLocks AS Integer
  
  SHELL "xset q | grep 'LED mask:' | grep -o 0000000." TO sShellOutput
  iKeyLocks = Val(sShellOutput)
  
  SELECT iKeyLocks
  CASE 1
    __is_capslock_on = TRUE
  CASE 2
    __is_capslock_on = FALSE
  CASE 3
    __is_capslock_on = TRUE
  END SELECT 
  
END

PUBLIC SUB caps_indicator(show_indicator AS Boolean)
  IF show_indicator = TRUE THEN 
    pict_caps_indicator__.Visible = TRUE
    lb_caps_indicator__.Visible = TRUE
  ELSE 
    pict_caps_indicator__.Visible = FALSE
    lb_caps_indicator__.Visible = FALSE
  ENDIF 
END

PUBLIC SUB capslock_info()
  'detect caps lock
  detect_capslock
  IF __is_capslock_on = TRUE THEN 
    caps_indicator(TRUE)
  ELSE 
    caps_indicator(FALSE)
  ENDIF 
END

PUBLIC SUB init_key_function()
  func_array = Split(key_function, ",")
END

PUBLIC SUB type_here___KeyPress()
DIM i AS Integer

  'Case sensitive key code still not supported by Gambas
  IF __start_type = FALSE THEN 
    Message.Info("Please click start to begin typing")
    RETURN 
  ENDIF 
  
  ' Block some key function
  FOR i = 0 TO func_array.Max
    'Message(func_array[i])
    IF func_array[i] = Str(Key.Code) THEN 
      type_here__.SetFocus
      STOP EVENT 
      RETURN 
    ENDIF 
  NEXT   

  capslock_info
  
  __char = Mid(__text, __pos, 1)
  IF Asc(__char) >= 97 AND Asc(__char) <= 122 THEN     ' letter a - z
    detect_capslock
    IF __is_capslock_on = TRUE THEN 
      __correct_typing = FALSE
      RETURN
    ENDIF 
    IF Key.Code = Key[__char] AND IF Key.Shift THEN
      __correct_typing = FALSE
    ELSE IF Key.Code = Key[__char] THEN 
      __correct_typing = TRUE
    ELSE 
      __correct_typing = FALSE
    ENDIF 
  ELSE IF Asc(__char) >= 65 AND Asc(__char) <= 90 THEN ' letter A - Z
    IF Key.Code = Key[__char] AND IF Key.Shift THEN
      detect_capslock
      IF __is_capslock_on = FALSE THEN
        __correct_typing = TRUE
      ELSE 
        __correct_typing = FALSE
      ENDIF 
    ELSE
      detect_capslock
      IF __is_capslock_on = TRUE THEN
        IF (Key.Code) = Key[__char] THEN
          __correct_typing = TRUE
        ELSE
          __correct_typing = FALSE
        ENDIF
      ELSE
        __correct_typing = FALSE
      ENDIF
    ENDIF
  ELSE IF Asc(__char) >= 44 AND Asc(__char) <= 57 THEN     ' number 0 - 9 dan some character
    IF (Key.Code) = Key[__char] THEN
      __correct_typing = TRUE
    ELSE
      __correct_typing = FALSE
    ENDIF
  ELSE IF (Asc(__char) = 32) OR (Asc(__char) = 39) OR (Asc(__char) = 59) OR (Asc(__char) = 61) OR (Asc(__char) = 91) OR (Asc(__char) = 92) OR (Asc(__char) = 93) OR (Asc(__char) = 96) THEN ' spasi 59 61 91 92 93 96 
    IF (Key.Code) = Key[__char] THEN
      __correct_typing = TRUE
    ELSE
      __correct_typing = FALSE
    ENDIF
  ELSE IF Asc(__char) >= 33 AND Asc(__char) <= 38 THEN ' huruf ! - +
    IF Key.Code = Key[__char] AND IF Key.Shift THEN
      __correct_typing = TRUE
    ELSE
      __correct_typing = FALSE
    ENDIF   
  ELSE IF Asc(__char) >= 40 AND Asc(__char) <= 43 THEN ' huruf ! - +
    IF Key.Code = Key[__char] AND IF Key.Shift THEN
      __correct_typing = TRUE
    ELSE
      __correct_typing = FALSE
    ENDIF   
  ELSE IF (Asc(__char) = 58) OR (Asc(__char) = 60) OR (Asc(__char) = 62) OR (Asc(__char) = 63) OR (Asc(__char) = 64) OR (Asc(__char) = 94) OR (Asc(__char) = 95) OR (Asc(__char) = 126) OR (Asc(__char) = 123) OR (Asc(__char) = 124) OR (Asc(__char) = 125) THEN ' huruf ! - +
    IF Key.Code = Key[__char] AND IF Key.Shift THEN
      __correct_typing = TRUE
    ELSE
      __correct_typing = FALSE
    ENDIF     
  ELSE
    RETURN
  ENDIF

    IF __correct_typing = TRUE THEN
  
    '// if correct typing then mark next letter with blue color
    IF __pos <= Len(__text)
      WITH board__
      .Select(__pos, 1)
      .Format.Color = Color.Blue 
      .Format.Font.Underline = TRUE
      .Unselect
      END WITH 
    ENDIF 
    
    '// if error typing, mark old letter with gray colors
    WITH board__
    .Select(__pos - 1, 1)
    IF __stop_type = FALSE THEN 
      .Format.Color = &FF6600&
    ELSE 
      .Format.Color = Color.Gray
    ENDIF 
    .Format.Font.Underline = FALSE
    .Unselect
    END WITH 
    
    '// go to next letter
    __pos = __pos + 1
    '__type_sound.Play(0)
    IF __mode_typoo = 0 THEN 
      __type_count = __type_count + 1
    ENDIF 
    info_char__.Foreground = &HFFFF00&
   __stop_type = FALSE
   
  ELSE     '// user type wrong letter :(
  
    '// if user press shift or capslock button don't record it as error :(
    IF Key.Code = 4128 THEN  'key shift
      __stop_type = __stop_type
      RETURN
    ENDIF
    IF Key.Code = 4132 THEN  'key capslock
      __stop_type = __stop_type
      capslock_info
      RETURN 
    ENDIF 
    
    '// don't record again if user have error before
    IF __stop_type = FALSE THEN
      IF __mode_typoo = 0 THEN 
          __error = __error + 1
      ENDIF 
    ENDIF
    
    __pos = __pos
    __stop_type = TRUE
    
    '// don't show error information in tutorial mode
    IF __mode_typoo = 0 THEN 
      char_error__.Text = Format(__error, "#,##")
    ENDIF 
    
    '// show some error info with red color
    info_char__.Foreground = Color.Red
    WITH board__
    .Select(__pos - 1, 1)
    .Format.Color = Color.Red 
    .Format.Font.Underline = TRUE
    .Unselect    
    END WITH 
  ENDIF 
  
  IF __pos <= Len(__text) THEN 
    '// show detail information until no letter to type
    info_char__.Text = Mid(__text, __pos, 1)
    map_virtual_keyboard(info_char__.Caption)
    
  ELSE 
  
    '// in default mode, calculate user typing speed
    IF __mode_typoo = 0 THEN 
      stop_type___Click
    ELSE
      '// in tutorial mode, go to next tutorial
      IF tuts_number < 36 THEN 
        tuts_number = tuts_number + 1
      ELSE 
        tuts_number = 1
      ENDIF 
      load_basic_tutorial(tuts_number)
      board__.Text = __text
      Board_Init
      Board_First_Char
      IF (tuts_number > 1) AND (tuts_number < 36) THEN 
        prev_tutor__.Enabled = TRUE
        next_tutor__.Enabled = TRUE
      ELSE IF (tuts_number <= 2) THEN 
        prev_tutor__.Enabled = FALSE
        next_tutor__.Enabled = TRUE
      ELSE IF (tuts_number = 36) THEN 
        next_tutor__.Enabled = FALSE
        prev_tutor__.Enabled = TRUE
      ENDIF 
    ENDIF 
  ENDIF 

END

PUBLIC SUB init_virtualkeyboard_color(mode AS Integer)
  DIM c_yellow, c_green, c_orange, c_blue AS Integer

  c_yellow = &HFFFF7F&
  c_green = &H7FFF7F&
  c_orange = &HFFBF7F&
  c_blue = &H7FBFFF&

  SELECT CASE mode
    CASE 0 '// default mode
      virtualkeyboard_color(0, b1)
      virtualkeyboard_color(0, b2)
      virtualkeyboard_color(0, b3)
      virtualkeyboard_color(0, b4)
      virtualkeyboard_color(0, b5)
      virtualkeyboard_color(0, b6)
      virtualkeyboard_color(0, b7)
      virtualkeyboard_color(0, b8)
      virtualkeyboard_color(0, b9)
      virtualkeyboard_color(0, b10)
      virtualkeyboard_color(0, b11)
      virtualkeyboard_color(0, b12)
      virtualkeyboard_color(0, b13)
      virtualkeyboard_color(0, b14)
      virtualkeyboard_color(0, b15)
      virtualkeyboard_color(0, b16)
      virtualkeyboard_color(0, b17)
      virtualkeyboard_color(0, b18)
      virtualkeyboard_color(0, b19)
      virtualkeyboard_color(0, b20)
      virtualkeyboard_color(0, b21)
      virtualkeyboard_color(0, b22)
      virtualkeyboard_color(0, b23)
      virtualkeyboard_color(0, b24)
      virtualkeyboard_color(0, b25)
      virtualkeyboard_color(0, b26)
      virtualkeyboard_color(0, b27)
      virtualkeyboard_color(0, b28)
      virtualkeyboard_color(0, b29)
      virtualkeyboard_color(0, b30)
      virtualkeyboard_color(0, b31)
      virtualkeyboard_color(0, b32)
      virtualkeyboard_color(0, b33)
      virtualkeyboard_color(0, b34)
      virtualkeyboard_color(0, b35)
      virtualkeyboard_color(0, b36)
      virtualkeyboard_color(0, b37)
      virtualkeyboard_color(0, b38)
      virtualkeyboard_color(0, b39)
      virtualkeyboard_color(0, b40)
      virtualkeyboard_color(0, b41)
      virtualkeyboard_color(0, b42)
      virtualkeyboard_color(0, b43)
      virtualkeyboard_color(0, b44)
      virtualkeyboard_color(0, b45)
      virtualkeyboard_color(0, b46)
      virtualkeyboard_color(0, b47)
      virtualkeyboard_color(0, b48)
      virtualkeyboard_color(0, b49)
      virtualkeyboard_color(0, b50)
      virtualkeyboard_color(0, b51)
      virtualkeyboard_color(0, b52)
    CASE 1 '// training mode
      '// map yellow color  :: &HFFFF7F&
        virtualkeyboard_training_color(b1, c_yellow)
        virtualkeyboard_training_color(b2, c_yellow)
        virtualkeyboard_training_color(b16, c_yellow)
        virtualkeyboard_training_color(b30, c_yellow)
        virtualkeyboard_training_color(b43, c_yellow)
        
        virtualkeyboard_training_color(b11, c_yellow)
        virtualkeyboard_training_color(b25, c_yellow)
        virtualkeyboard_training_color(b39, c_yellow)
        virtualkeyboard_training_color(b52, c_yellow)
        
        virtualkeyboard_training_color(b12, c_yellow)
        virtualkeyboard_training_color(b26, c_yellow)
        virtualkeyboard_training_color(b40, c_yellow)
        
        virtualkeyboard_training_color(b13, c_yellow)
        virtualkeyboard_training_color(b27, c_yellow)
        
        virtualkeyboard_training_color(b28, c_yellow)
        
      '// map green color :: &H7FFF7F&
      virtualkeyboard_training_color(b3, c_green)
      virtualkeyboard_training_color(b17, c_green)
      virtualkeyboard_training_color(b31, c_green)
      virtualkeyboard_training_color(b44, c_green)
      
      virtualkeyboard_training_color(b10, c_green)
      virtualkeyboard_training_color(b24, c_green)
      virtualkeyboard_training_color(b38, c_green)
      virtualkeyboard_training_color(b51, c_green)
        
      '// map orange color :: &HFFBF7F&
      virtualkeyboard_training_color(b4, c_orange)
      virtualkeyboard_training_color(b18, c_orange)
      virtualkeyboard_training_color(b32, c_orange)
      virtualkeyboard_training_color(b45, c_orange)
      
      virtualkeyboard_training_color(b9, c_orange)
      virtualkeyboard_training_color(b23, c_orange)
      virtualkeyboard_training_color(b37, c_orange)
      virtualkeyboard_training_color(b50, c_orange)
      
      '// map blue color :: &H7FBFFF&
      virtualkeyboard_training_color(b5, c_blue)
      virtualkeyboard_training_color(b6, c_blue)
      virtualkeyboard_training_color(b7, c_blue)
      virtualkeyboard_training_color(b8, c_blue)
      virtualkeyboard_training_color(b19, c_blue)
      virtualkeyboard_training_color(b20, c_blue)
      virtualkeyboard_training_color(b21, c_blue)
      virtualkeyboard_training_color(b22, c_blue)
      virtualkeyboard_training_color(b33, c_blue)
      virtualkeyboard_training_color(b34, c_blue)
      virtualkeyboard_training_color(b35, c_blue)
      virtualkeyboard_training_color(b36, c_blue)
      virtualkeyboard_training_color(b46, c_blue)
      virtualkeyboard_training_color(b47, c_blue)
      virtualkeyboard_training_color(b48, c_blue)
      virtualkeyboard_training_color(b49, c_blue)
        
  END SELECT 
  virtualkeyboard_color(0, b42)
  virtualkeyboard_color(0, b53)
  virtualkeyboard_color(0, b54)
END

PUBLIC SUB init_virtual_hand()
  j1__.Visible = FALSE
  j2__.Visible = FALSE
  j3__.Visible = FALSE
  j4__.Visible = FALSE
  j5__.Visible = FALSE
  j6__.Visible = FALSE
  j7__.Visible = FALSE
  j8__.Visible = FALSE
  j9__.Visible = FALSE
  j10__.Visible = FALSE
END

PUBLIC SUB map_virtual_hand(hand AS Integer)
  SELECT CASE hand
    CASE 1
      j1__.Visible = TRUE
    CASE 2
      j2__.Visible = TRUE
    CASE 3
      j3__.Visible = TRUE
    CASE 4
      j4__.Visible = TRUE
    CASE 5
      j5__.Visible = TRUE
    CASE 6
      j6__.Visible = TRUE
    CASE 7
      j7__.Visible = TRUE
    CASE 8
      j8__.Visible = TRUE
    CASE 9
      j9__.Visible = TRUE
    CASE 10
      j10__.Visible = TRUE
  END SELECT 
END

PUBLIC SUB init_hand_caption()
  p1__.Visible = FALSE
  p2__.Visible = FALSE
  p3__.Visible = FALSE
  p4__.Visible = FALSE
  p5__.Visible = FALSE
  p6__.Visible = FALSE
  p7__.Visible = FALSE
  p8__.Visible = FALSE
  p9__.Visible = FALSE
  
  WITH p9__
    .Width = 30
    .Height = 30
  END WITH 

  WITH p5__
    .Width = 30
    .Height = 30
  END WITH 
END


PUBLIC SUB map_hand_caption(handcap AS Integer, capsmode AS Integer, charx AS String)
  SELECT CASE handcap
    CASE 1
      p1__.Visible = TRUE
      p1__.Caption = "space"
    CASE 2
      p2__.Visible = TRUE
      p2__.Caption = charx
    CASE 3
      p3__.Visible = TRUE
      p3__.Caption = charx
    CASE 4
      p4__.Visible = TRUE
      p4__.Caption = charx
    CASE 5
      p5__.Visible = TRUE
      IF capsmode = 0 THEN 
        p5__.Caption = charx
      ELSE 
        p5__.Caption = "Shift"
        WITH p5__
          .Width = 63
          .Height = 30
        END WITH 
      ENDIF 
    CASE 6
      p6__.Visible = TRUE
      p6__.Caption = charx
    CASE 7
      p7__.Visible = TRUE
      p7__.Caption = charx
    CASE 8
      p8__.Visible = TRUE
      p8__.Caption = charx
    CASE 9
      p9__.Visible = TRUE
      IF capsmode = 0 THEN 
        p9__.Caption = charx
      ELSE 
        p9__.Caption = "Shift"
        WITH p9__
          .Width = 63
          .Height = 30
        END WITH 
      ENDIF 
  END SELECT  
END

PUBLIC SUB virtualkeyboard_training_color(mybutton AS Button, mycolor AS Integer)
  mybutton.Background = mycolor
  mybutton.Foreground = Color.TextForeground
END

PUBLIC SUB virtualkeyboard_color(mode AS Integer, mybutton AS Button)
  SELECT CASE mode
    CASE 0 '// default color
      mybutton.Background = Color.White
      mybutton.ForeColor = Color.Black
    CASE 1 
      mybutton.Background = Color.Red
      mybutton.Foreground = Color.White
  END SELECT 
END

PUBLIC SUB map_virtual_keyboard(char_ AS String)
  ' I'm still not found yet how to optimize virtualkeyboard code
  
  init_virtual_hand
  init_hand_caption
  
  SELECT CASE __mode_typoo
    CASE 0
      init_virtualkeyboard_color(0)
    CASE 1
      init_virtualkeyboard_color(1)
  END SELECT 

  SELECT CASE char_
    CASE "a"
      virtualkeyboard_color(1, b30)
      map_virtual_hand(10)
      map_hand_caption(9, 0, char_)
    CASE "s"
      virtualkeyboard_color(1, b31)
      map_virtual_hand(9)
      map_hand_caption(8, 0, char_)
    CASE "d"
      virtualkeyboard_color(1, b32)
      map_virtual_hand(8)
      map_hand_caption(7, 0, char_)
    CASE "f"
      virtualkeyboard_color(1, b33)
      map_virtual_hand(7)
      map_hand_caption(6, 0, char_)
    CASE "g"
      virtualkeyboard_color(1, b34)
      map_virtual_hand(7)
      map_hand_caption(6, 0, char_)
    CASE "h"
      virtualkeyboard_color(1, b35)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE "j"
      virtualkeyboard_color(1, b36)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE "k"
      virtualkeyboard_color(1, b37)
      map_virtual_hand(3)
      map_hand_caption(3, 0, char_)
    CASE "l"
      virtualkeyboard_color(1, b38)
      map_virtual_hand(4)
      map_hand_caption(4, 0, char_)
    CASE ";"
      virtualkeyboard_color(1, b39)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE ":"
      virtualkeyboard_color(1, b39)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "'"
      virtualkeyboard_color(1, b40)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE "\""
      virtualkeyboard_color(1, b40)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "q"
      virtualkeyboard_color(1, b16)
      map_virtual_hand(10)
      map_hand_caption(9, 0, char_)
    CASE "w"
      virtualkeyboard_color(1, b17)
      map_virtual_hand(9)
      map_hand_caption(8, 0, char_)
    CASE "e"
      virtualkeyboard_color(1, b18)
      map_virtual_hand(8)
      map_hand_caption(7, 0, char_)
    CASE "r"
      virtualkeyboard_color(1, b19)
      map_virtual_hand(7)
      map_hand_caption(6, 0, char_)
    CASE "t"
      virtualkeyboard_color(1, b20)
      map_virtual_hand(7)
      map_hand_caption(6, 0, char_)
    CASE "y"
      virtualkeyboard_color(1, b21)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE "u"
      virtualkeyboard_color(1, b22)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE "i"
      virtualkeyboard_color(1, b23)
      map_virtual_hand(3)
      map_hand_caption(3, 0, char_)
    CASE "o"
      virtualkeyboard_color(1, b24)
      map_virtual_hand(4)
      map_hand_caption(4, 0, char_)
    CASE "p"
      virtualkeyboard_color(1, b25)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE "[" 
      virtualkeyboard_color(1, b26)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE "{"
      virtualkeyboard_color(1, b26)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "]"
      virtualkeyboard_color(1, b27)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE "}"
      virtualkeyboard_color(1, b27)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "|"
      virtualkeyboard_color(1, b28)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE Chr(92)
      virtualkeyboard_color(1, b28)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE "z"
      virtualkeyboard_color(1, b43)
      map_virtual_hand(10)
      map_hand_caption(9, 0, char_)
    CASE "x"
      virtualkeyboard_color(1, b44)
      map_virtual_hand(9)
      map_hand_caption(8, 0, char_)
    CASE "c"
      virtualkeyboard_color(1, b45)
      map_virtual_hand(8)
      map_hand_caption(7, 0, char_)
    CASE "v"
      virtualkeyboard_color(1, b46)
      map_virtual_hand(7)
      map_hand_caption(6, 0, char_)
    CASE "b"
      virtualkeyboard_color(1, b47)
      map_virtual_hand(7)
      map_hand_caption(6, 0, char_)
    CASE "n"
      virtualkeyboard_color(1, b48)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE "m"
      virtualkeyboard_color(1, b49)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE ","
      virtualkeyboard_color(1, b50)
      map_virtual_hand(3)
      map_hand_caption(3, 0, char_)
    CASE "<"
      virtualkeyboard_color(1, b50)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(3)
      map_virtual_hand(10)
      map_hand_caption(3, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "."
      virtualkeyboard_color(1, b51)
      map_virtual_hand(4)
      map_hand_caption(4, 0, char_)
    CASE ">"
      virtualkeyboard_color(1, b51)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(4)
      map_virtual_hand(10)
      map_hand_caption(4, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE " "
      virtualkeyboard_color(1, b54)
      map_virtual_hand(1)
      map_hand_caption(1, 0, char_)
    CASE "/"
      virtualkeyboard_color(1, b52)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE "?"
      virtualkeyboard_color(1, b52)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "`"
      virtualkeyboard_color(1, b1)
      map_virtual_hand(10)
      map_hand_caption(9, 0, char_)
    CASE "~"
      virtualkeyboard_color(1, b1)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(10)
      map_virtual_hand(5)
      map_hand_caption(9, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "1"
      virtualkeyboard_color(1, b2)
      map_virtual_hand(10)
      map_hand_caption(9, 0, char_)
    CASE "!"
      virtualkeyboard_color(1, b2)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(10)
      map_virtual_hand(5)
      map_hand_caption(9, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "2"
      virtualkeyboard_color(1, b3)
      map_virtual_hand(9)
      map_hand_caption(8, 0, char_)
    CASE "@"
      virtualkeyboard_color(1, b3)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(9)
      map_virtual_hand(5)
      map_hand_caption(8, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "3"
      virtualkeyboard_color(1, b4)
      map_virtual_hand(8)
      map_hand_caption(7, 0, char_)
    CASE "#"
      virtualkeyboard_color(1, b4)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(8)
      map_virtual_hand(5)
      map_hand_caption(7, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "4"
      virtualkeyboard_color(1, b5)
      map_virtual_hand(7)
      map_hand_caption(6, 0, char_)
    CASE "$"
      virtualkeyboard_color(1, b5)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "5"
      virtualkeyboard_color(1, b6)
      map_virtual_hand(7)
    CASE "%"
      virtualkeyboard_color(1, b6)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "6"
      virtualkeyboard_color(1, b7)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE "^"
      virtualkeyboard_color(1, b7)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "7"
      virtualkeyboard_color(1, b8)
      map_virtual_hand(2)
      map_hand_caption(2, 0, char_)
    CASE "&"
      virtualkeyboard_color(1, b8)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "8"
      virtualkeyboard_color(1, b9)
      map_virtual_hand(3)
      map_hand_caption(3, 0, char_)
    CASE "*"
      virtualkeyboard_color(1, b9)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(3)
      map_virtual_hand(10)
      map_hand_caption(3, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "9"
      virtualkeyboard_color(1, b10)
      map_virtual_hand(4)
      map_hand_caption(4, 0, char_)
    CASE "("
      virtualkeyboard_color(1, b10)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(4)
      map_virtual_hand(10)
      map_hand_caption(4, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "0"
      virtualkeyboard_color(1, b11)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE ")"
      virtualkeyboard_color(1, b11)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "-"
      virtualkeyboard_color(1, b12)
      map_virtual_hand(5)
    CASE "_"
      virtualkeyboard_color(1, b12)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "="
      virtualkeyboard_color(1, b13)
      map_virtual_hand(5)
      map_hand_caption(5, 0, char_)
    CASE "+"
      virtualkeyboard_color(1, b13)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "A"
      virtualkeyboard_color(1, b30)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(10)
      map_virtual_hand(5)
      map_hand_caption(9, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "S"
      virtualkeyboard_color(1, b31)
      virtualkeyboard_color(1, b53)    
      map_virtual_hand(9)
      map_virtual_hand(5)
      map_hand_caption(8, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "D"
      virtualkeyboard_color(1, b32)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(8)
      map_virtual_hand(5)
      map_hand_caption(7, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "F"
      virtualkeyboard_color(1, b33)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "G"
      virtualkeyboard_color(1, b34)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "H"
      virtualkeyboard_color(1, b35)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "J"
      virtualkeyboard_color(1, b36)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "K"
      virtualkeyboard_color(1, b37)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(3)
      map_virtual_hand(10)
      map_hand_caption(3, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "L"
      virtualkeyboard_color(1, b38)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(4)
      map_virtual_hand(10)
      map_hand_caption(4, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "Q"
      virtualkeyboard_color(1, b16)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(10)
      map_virtual_hand(5)
      map_hand_caption(9, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "W"
      virtualkeyboard_color(1, b17)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(9)
      map_virtual_hand(5)
      map_hand_caption(8, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "E"
      virtualkeyboard_color(1, b18)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(8)
      map_virtual_hand(5)
      map_hand_caption(7, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "R"
      virtualkeyboard_color(1, b19)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "T"
      virtualkeyboard_color(1, b20)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(5, 1, char_)
    CASE "Y"
      virtualkeyboard_color(1, b21)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "U"
      virtualkeyboard_color(1, b22)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "I"
      virtualkeyboard_color(1, b23)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(3)
      map_virtual_hand(10)
      map_hand_caption(3, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "O"
      virtualkeyboard_color(1, b24)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(4)
      map_virtual_hand(10)
      map_hand_caption(4, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "P"
      virtualkeyboard_color(1, b25)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(5)
      map_virtual_hand(10)
      map_hand_caption(5, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "Z"
      virtualkeyboard_color(1, b43)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(10)
      map_virtual_hand(5)
      map_hand_caption(9, 0, char_)
      map_hand_caption(4, 1, char_)
    CASE "X"
      virtualkeyboard_color(1, b44)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(9)
      map_virtual_hand(5)
      map_hand_caption(8, 0, char_)
      map_hand_caption(4, 1, char_)
    CASE "C"
      virtualkeyboard_color(1, b45)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(8)
      map_virtual_hand(5)
      map_hand_caption(7, 0, char_)
      map_hand_caption(4, 1, char_)
    CASE "V"
      virtualkeyboard_color(1, b46)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(4, 1, char_)
    CASE "B"
      virtualkeyboard_color(1, b47)
      virtualkeyboard_color(1, b53)
      map_virtual_hand(7)
      map_virtual_hand(5)
      map_hand_caption(6, 0, char_)
      map_hand_caption(4, 1, char_)
    CASE "N"
      virtualkeyboard_color(1, b48)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
    CASE "M"
      virtualkeyboard_color(1, b49)
      virtualkeyboard_color(1, b42)
      map_virtual_hand(2)
      map_virtual_hand(10)
      map_hand_caption(2, 0, char_)
      map_hand_caption(9, 1, char_)
   END SELECT
END

PUBLIC SUB start_type___Click()
  IF __text <> "" THEN 
    __start_type = TRUE
    stop_type__.Enabled = TRUE
    start_type__.Enabled = FALSE
    'open_file__.Enabled = FALSE
    mn_open.Enabled = FALSE
    null_info
    Board_Init
    Board_First_Char
    __time = 0
    Init_Timer
  ELSE 
    Message.Info("Please open tutorial file")
  ENDIF 
END

PUBLIC SUB null_info()
  start_time__.Caption = "00:00:00"
  stop_time__.Caption = "00:00:00"
  info_char__.Caption = ""
  char_error__.Caption = "0"
  speed__.Caption = "0"
  char_accuracy__.Caption = "0 %"
END


PUBLIC SUB Board_Init()
  __pos = 1
  __type_count = 0
  __error = 0
  
  WITH board__
  .SelectAll
  .Format.Color = Color.Black
  .Format.Font.Underline = FALSE
  .Format.Alignment = Align.Justify
  .Refresh
  .Select(__pos - 1, 1)
  .Format.Color = Color.Blue
  .Format.Font.Underline = TRUE
  .Unselect
  END WITH 
  type_here__.SetFocus
END

PUBLIC SUB Board_First_Char()
  __char = Mid(__text, __pos, 1)
  char_error__.Caption = "0"
  info_char__.Caption = __char
  info_char__.ForeColor = &HFFFF00&
  speed__.Caption = "0"
  map_virtual_keyboard(__char)
END

PUBLIC SUB Init_Timer()
  start_time__.Caption = Format(Time(Now), "hh:nn:ss")
  __start_time = Time(Now)
  stop_time__.Caption = "00:00:00"
  Timer1.Enabled = TRUE
END

PUBLIC SUB stop_type___Click()
  __start_type = FALSE
  start_type__.Enabled = TRUE
  stop_type__.Enabled = FALSE
  'open_file__.Enabled = FALSE
  mn_open.Enabled = TRUE
  IF __mode_typoo = 0 THEN 
    Timer1.Enabled = FALSE
    IF __type_count > 0 THEN 
      calculate_speed
      calculate_accuracy
      IF Len(__text) = __type_count THEN 
        Message.Info("Finish")
      ELSE 
        Message.Warning("Aborted by user")
      ENDIF 
    ENDIF 
  ENDIF 
END

PUBLIC SUB calculate_speed()
  DIM speed AS Integer
  
  stop_time__.Caption = Format(CDate(__start_time + Date(0, 0, 0, 0, 0, __time)), "hh:nn:ss")
  speed = __type_count / (__time / 60)
  speed__.Caption = speed
END

PUBLIC SUB calculate_accuracy()
  DIM accuracy AS Integer
  
  accuracy = ((__type_count - __error) / Len(__text)) * 100
  char_accuracy__.Caption = accuracy & " %"
END


PUBLIC SUB board___GotFocus()
  type_here__.SetFocus
END

PUBLIC SUB Timer1_Timer()
  __time = __time + 1
END

PUBLIC SUB Form_Close()
  mn_exit_Click
END

PUBLIC SUB about___Click()
  About.Show
END

PUBLIC SUB typoo_mode___Click()
  SELECT CASE typoo_mode__.Index
    CASE 0 '// default mode
      start_type__.Enabled = TRUE
      mn_open.Enabled = TRUE
      next_tutor__.Enabled = FALSE
      prev_tutor__.Enabled = FALSE
      null_info
       __mode_typoo = 0
      __text = ""
      board__.Text = __text
      type_here__.SetFocus
      __start_type = FALSE
      init_virtualkeyboard_color(0)
      info_char__.Text = ""
      map_virtual_keyboard("")
    CASE 1 '// tutor mode
      start_type__.Enabled = FALSE
      stop_type__.Enabled = FALSE
      mn_open.Enabled = FALSE
      next_tutor__.Enabled = TRUE
      null_info
      Timer1.Enabled = FALSE
      __start_type = TRUE
      __mode_typoo = 1
      tuts_number = 1
      init_virtualkeyboard_color(1)
      load_basic_tutorial(tuts_number)
      board__.Text = __text
      Board_Init
      Board_First_Char
  END SELECT 
END

PUBLIC SUB generate_tuts_letter(mode AS Integer, char_pos01 AS Integer, char_pos02 AS Integer)
  DIM char01, tut_char01, tut_char02 AS String
  DIM i, j AS Integer
  
  char01 = "asdfghjkl;'qwertyuiop[]zxcvbnm,./" 
  __text = ""
  
  SELECT CASE mode
    CASE 0  '// 1 char 
      tut_char01 = Mid(char01, char_pos01, 1)
      FOR i = 1 TO 15
        FOR j = 1 TO 4
          __text = __text & tut_char01
        NEXT
        __text = __text & " "
      NEXT 
    CASE 1 '// 4 char
      tut_char01 = Mid(char01, char_pos01, 4)
      FOR i = 1 TO 15
        __text = __text & tut_char01 & " "
      NEXT 
    CASE 2  '// more char
      tut_char01 = Mid(char01, char_pos01, 5)
      tut_char02 = Mid(char01, char_pos02, 5)
      FOR i = 1 TO 15
        __text = __text & tut_char01 & " " & tut_char02 & " "
      NEXT 
  END SELECT 
END

PUBLIC SUB load_basic_tutorial(tuts AS Integer)
  '       = "123456789012345678901234567890"
  'char01 = "asdfghjkl;'qwertyuiop[]zxcvbnm,./" 
  SELECT CASE tuts
    CASE 1
      generate_tuts_letter(0, 1, 1)
    CASE 2
      generate_tuts_letter(0, 2, 1)
    CASE 3
      generate_tuts_letter(0, 3, 1)
    CASE 4
      generate_tuts_letter(0, 4, 1)
    CASE 5
      generate_tuts_letter(1, 1, 1)
    CASE 6
      generate_tuts_letter(0, 7, 1)
    CASE 7
      generate_tuts_letter(0, 8, 1)
    CASE 8
      generate_tuts_letter(0, 9, 1)
    CASE 9
      generate_tuts_letter(0, 10, 1)
    CASE 10
      generate_tuts_letter(1, 7, 1)
    CASE 11
      generate_tuts_letter(0, 5, 1)
    CASE 12
      generate_tuts_letter(0, 6, 1)
    CASE 13
      generate_tuts_letter(2, 1, 7)

    '// qwerty key
    CASE 14
      generate_tuts_letter(0, 12, 1)
    CASE 15
      generate_tuts_letter(0, 13, 1)
    CASE 16
      generate_tuts_letter(0, 14, 1)
    CASE 17
      generate_tuts_letter(0, 15, 1)
    CASE 18
      generate_tuts_letter(1, 12, 1)
    CASE 19
      generate_tuts_letter(0, 18, 1)
    CASE 20
      generate_tuts_letter(0, 19, 1)
    CASE 21
      generate_tuts_letter(0, 20, 1)
    CASE 22
      generate_tuts_letter(0, 21, 1)
    CASE 23
      generate_tuts_letter(1, 18, 1)
    CASE 24
      generate_tuts_letter(0, 16, 1)
    CASE 25
      generate_tuts_letter(0, 17, 1)
    CASE 26
      generate_tuts_letter(2, 12, 17)
      
    '// zxcv key
    CASE 27
      generate_tuts_letter(0, 24, 1)
    CASE 28
      generate_tuts_letter(0, 25, 1)
    CASE 29
      generate_tuts_letter(0, 26, 1)
    CASE 30
      generate_tuts_letter(0, 27, 1)
    CASE 31
      generate_tuts_letter(1, 24, 1)
    CASE 32
      generate_tuts_letter(0, 29, 1)
    CASE 33
      generate_tuts_letter(0, 30, 1)
    CASE 34
      generate_tuts_letter(0, 28, 1)
    CASE 35
      generate_tuts_letter(1, 29, 1)
    CASE 36
      generate_tuts_letter(2, 24, 29)
  END SELECT 
  __text = Trim(__text)  
END

PUBLIC SUB prev_tutor___Click()
  IF tuts_number = 2 THEN prev_tutor__.Enabled = FALSE
  IF tuts_number < 2 THEN 
    tuts_number = 1
  ELSE 
    tuts_number = tuts_number - 1
    next_tutor__.Enabled = TRUE
  ENDIF 
  load_basic_tutorial(tuts_number)
  board__.Text = __text
  Board_Init
  Board_First_Char
END

PUBLIC SUB next_tutor___Click()
  IF tuts_number = 35 THEN next_tutor__.Enabled = FALSE
  IF tuts_number > 35 THEN 
    tuts_number = 36
  ELSE 
    tuts_number = tuts_number + 1
    prev_tutor__.Enabled = TRUE
  ENDIF 
  load_basic_tutorial(tuts_number)
  board__.Text = __text
  Board_Init
  Board_First_Char
END

PUBLIC SUB mn_open_Click()
  DIM texttemp AS String
  
  __text = ""
  texttemp = ""
  Dialog.Title = "Select tutorial file..."
  Dialog.Filter = ["*", "Text File"]
  Dialog.Path = User.home 
  IF Dialog.OpenFile(FALSE) THEN RETURN
  __text = Trim((File.Load(Dialog.Path)))
  texttemp = __text
  __text = Replace(__text, "<", "&#60 ")
  __text = Replace(__text, ">", "&#62 ")
  board__.Text = __text
  __text = texttemp
  texttemp = ""
  char_count__.Text = Format(Len(__text), "#,##")
  null_info
END

PUBLIC SUB mn_about_Click()
  About.Show
END

PUBLIC SUB mn_exit_Click()
  Timer1.Enabled = FALSE
  '__type_sound = ""
  ME.Close
END

PUBLIC SUB mn_tutorial_Click()
TRY 
  Desktop.Open(Application.Path & "/tutorial.pdf")
  
CATCH 
  Message.Error("Cannot open tutorial.pdf")
END