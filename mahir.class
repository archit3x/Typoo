' Gambas class file

' Typoo --------------------------------------------
' Small software to learn fast typing
' 
' Developers: --------------------------------------------------------
' Project Founder : Kusuma Negara <deny.krishna108@gmail.com>
' Programmer : Christian Kurniawan <saa7.go@gmail.com>
' Artwork Designer : Hamzah Fahrudin <karangdesaku@yahoo.co.id>
' Package Maintainer : Damar Riyadi <tldm217@gmail.com>
' License : GPL GNU General Public License Version 2
'
' coded in Gambas 2.22 on Kubuntu 11.10 machine
'
' ---------------------------------------------------------------------------------------
' "Diluar sana orang bisa berbagi "emas". Meski saya cuma bisa berbagi "kerikil",
' setidaknya hal itu tidak mengurangi semangat berbagi saya untuk teman - teman
' semua"
' 
' Semoga Aplikasi ini bisa bermanfaat untuk dunia pendidikan di Indonesia :)
' 
' 
' Thanks to:
' GAMBAS Creator
' ---------------------------------------------------------------------------------------

PUBLIC __error AS Integer
PUBLIC __type_count AS Integer
PUBLIC __time AS Integer
PUBLIC __start_time AS Date
PUBLIC __red_alert AS Boolean
PUBLIC __mulai_ngetik AS Boolean

PRIVATE CONST MaxRecentFiles AS Integer = 5
PRIVATE RecentFiles AS NEW String[]
PRIVATE RecentMenus AS NEW Object[]
PRIVATE FirstLoad AS Boolean = FALSE

PUBLIC SUB _new()
  mdlGlobal.reset
  LoadConfig
  ME.Center
END

PUBLIC SUB detect_capslock()
  
  'this code take from Stefano Palmeri post in gambas forum (http://gambasrad.org/zforum/view_topic?topic_id=1685)
  
  DIM sShellOutput AS String
  DIM iKeyLocks AS Integer
  
  SHELL "xset q | grep 'LED mask:' | grep -o 0000000." TO sShellOutput
  iKeyLocks = Val(sShellOutput)
  
  SELECT iKeyLocks
  CASE 0
    mdlGlobal.is_capslock_on = FALSE
  CASE 1
    mdlGlobal.is_capslock_on = TRUE
  CASE 2
    mdlGlobal.is_capslock_on = FALSE
  CASE 3
    mdlGlobal.is_capslock_on = TRUE
  END SELECT 
  
END

PUBLIC SUB caps_indicator(show_indicator AS Boolean)
  IF show_indicator = TRUE THEN 
    pict_caps_indicator__.Visible = TRUE
    lb_caps_indicator__.Visible = TRUE
  ELSE 
    pict_caps_indicator__.Visible = FALSE
    lb_caps_indicator__.Visible = FALSE
  ENDIF 
END

PUBLIC SUB capslock_info()
  'detect caps lock
  detect_capslock
  IF mdlGlobal.is_capslock_on = TRUE THEN 
    caps_indicator(TRUE)
  ELSE 
    caps_indicator(FALSE)
  ENDIF 
END

PUBLIC SUB type_here___KeyPress()

  'Case sensitive key code still not supported by Gambas
  IF mdlGlobal.start_type = FALSE THEN 
    Message.Info("Silahkan klik tombol Mulai untuk memulai")
    STOP EVENT 
    RETURN 
  ENDIF 
  
  ' Block some key function
  IF mdlGlobal.func_array.Exist(Key.Code) THEN 
    type_here__.SetFocus
    STOP EVENT 
    RETURN 
  ENDIF 
  
  IF mdlGlobal.stop_type = FALSE THEN 
    IF Key.Code = Key.BackSpace THEN 
      STOP EVENT 
      RETURN 
    ENDIF 
  ENDIF 

  capslock_info
  
  mdlGlobal.char = Mid(mdlGlobal.text, mdlGlobal.pos, 1)
  IF Asc(mdlGlobal.char) >= 97 AND Asc(mdlGlobal.char) <= 122 THEN     ' letter a - z
    detect_capslock
    IF mdlGlobal.is_capslock_on = TRUE THEN 
      mdlGlobal.correct_typing = FALSE
      'RETURN
      GOTO checktype
    ENDIF 
    IF Key.Code = Key[mdlGlobal.char] AND IF Key.Shift THEN
      mdlGlobal.correct_typing = FALSE
    ELSE IF Key.Code = Key[mdlGlobal.char] THEN 
      mdlGlobal.correct_typing = TRUE
    ELSE 
      mdlGlobal.correct_typing = FALSE
    ENDIF 
  ELSE IF Asc(mdlGlobal.char) >= 65 AND Asc(mdlGlobal.char) <= 90 THEN ' letter A - Z
    IF Key.Code = Key[mdlGlobal.char] AND IF Key.Shift THEN
      detect_capslock
      IF mdlGlobal.is_capslock_on = FALSE THEN
        mdlGlobal.correct_typing = TRUE
      ELSE 
        mdlGlobal.correct_typing = FALSE
      ENDIF 
    ELSE
      detect_capslock
      IF mdlGlobal.is_capslock_on = TRUE THEN
        IF (Key.Code) = Key[mdlGlobal.char] THEN
          mdlGlobal.correct_typing = TRUE
        ELSE
          mdlGlobal.correct_typing = FALSE
        ENDIF
      ELSE
        mdlGlobal.correct_typing = FALSE
      ENDIF
    ENDIF
  ELSE IF Asc(mdlGlobal.char) >= 44 AND Asc(mdlGlobal.char) <= 57 THEN     ' number 0 - 9 dan some character
    IF (Key.Code) = Key[mdlGlobal.char] THEN
      mdlGlobal.correct_typing = TRUE
    ELSE
      mdlGlobal.correct_typing = FALSE
    ENDIF
  ELSE IF (Asc(mdlGlobal.char) = 32) OR (Asc(mdlGlobal.char) = 39) OR (Asc(mdlGlobal.char) = 59) OR (Asc(mdlGlobal.char) = 61) OR (Asc(mdlGlobal.char) = 91) OR (Asc(mdlGlobal.char) = 92) OR (Asc(mdlGlobal.char) = 93) OR (Asc(mdlGlobal.char) = 96) THEN ' spasi 59 61 91 92 93 96 
    IF (Key.Code) = Key[mdlGlobal.char] THEN
      mdlGlobal.correct_typing = TRUE
    ELSE
      mdlGlobal.correct_typing = FALSE
    ENDIF
  ELSE IF Asc(mdlGlobal.char) >= 33 AND Asc(mdlGlobal.char) <= 38 THEN ' huruf ! - +
    IF Key.Code = Key[mdlGlobal.char] AND IF Key.Shift THEN
      mdlGlobal.correct_typing = TRUE
    ELSE
      mdlGlobal.correct_typing = FALSE
    ENDIF   
  ELSE IF Asc(mdlGlobal.char) >= 40 AND Asc(mdlGlobal.char) <= 43 THEN ' huruf ! - +
    IF Key.Code = Key[mdlGlobal.char] AND IF Key.Shift THEN
      mdlGlobal.correct_typing = TRUE
    ELSE
      mdlGlobal.correct_typing = FALSE
    ENDIF   
  ELSE IF (Asc(mdlGlobal.char) = 58) OR (Asc(mdlGlobal.char) = 60) OR (Asc(mdlGlobal.char) = 62) OR (Asc(mdlGlobal.char) = 63) OR (Asc(mdlGlobal.char) = 64) OR (Asc(mdlGlobal.char) = 94) OR (Asc(mdlGlobal.char) = 95) OR (Asc(mdlGlobal.char) = 126) OR (Asc(mdlGlobal.char) = 123) OR (Asc(mdlGlobal.char) = 124) OR (Asc(mdlGlobal.char) = 125) THEN ' huruf ! - +
    IF Key.Code = Key[mdlGlobal.char] AND IF Key.Shift THEN
      mdlGlobal.correct_typing = TRUE
    ELSE
      mdlGlobal.correct_typing = FALSE
    ENDIF     
  ELSE
    RETURN
  ENDIF

checktype:
    IF mdlGlobal.stop_type = TRUE THEN 
      IF Key.Code = Key.BackSpace THEN 
        mdlGlobal.stop_type = FALSE
        RETURN 
      ELSE 
        mdlGlobal.stop_type = TRUE
        STOP EVENT 
        RETURN 
      ENDIF 
    ENDIF 

    IF mdlGlobal.correct_typing = TRUE THEN
    '// if correct typing then mark next letter with blue color
    IF mdlGlobal.pos <= Len(mdlGlobal.text)
      WITH board__
      .Select(mdlGlobal.pos, 1)
      .Format.Color = Color.Blue 
      .Format.Font.Underline = TRUE
      .Unselect
      END WITH 
    ENDIF 
    
    '// if error typing, mark old letter with gray colors
    WITH board__
    .Select(mdlGlobal.pos - 1, 1)
    IF __red_alert = FALSE THEN 
      .Format.Color = &FF6600&
    ELSE 
      .Format.Color = Color.Gray
    ENDIF 
    .Format.Font.Underline = FALSE
    .Unselect
    END WITH 
    
    '// go to next letter
    mdlGlobal.pos = mdlGlobal.pos + 1
    __type_count = __type_count + 1
    info_char__.Foreground = &HFFFF00&
    mdlGlobal.stop_type = FALSE
   __red_alert = FALSE
  ELSE     '// user type wrong letter :(
  
    '// if user press shift or capslock button don't record it as error :(
    IF Key.Code = 4128 THEN  'key shift
      mdlGlobal.stop_type = mdlGlobal.stop_type
      RETURN
    ENDIF
    IF Key.Code = 4132 THEN  'key capslock
      mdlGlobal.stop_type = mdlGlobal.stop_type
      capslock_info
      RETURN 
    ENDIF 
    
    '// don't record again if user have error before
    IF mdlGlobal.stop_type = FALSE THEN
      __error = __error + 1
    ENDIF
    
    mdlGlobal.pos = mdlGlobal.pos
    mdlGlobal.stop_type = TRUE
    
    char_error__.Text = Format(__error, "#,##")
   
    '// show some error info with red color
    info_char__.Foreground = Color.Red
    WITH board__
    .Select(mdlGlobal.pos - 1, 1)
    .Format.Color = Color.Red 
    .Format.Font.Underline = TRUE
    .Unselect    
    END WITH 
    __red_alert = TRUE
  ENDIF 
  
  IF mdlGlobal.pos <= Len(mdlGlobal.text) THEN 
    '// show detail information until no letter to type
    info_char__.Text = Mid(mdlGlobal.text, mdlGlobal.pos, 1)
  ELSE 
      stop_type___Click
  ENDIF 

END

PUBLIC SUB mn_open_Click()

  ' DIM texttemp AS String
  ' 
  ' __text = ""
  ' texttemp = ""
  ' Dialog.Title = "Pilih berkas latihan..."
  ' Dialog.Filter = ["*", "Text File"]
  ' Dialog.Path = User.home 
  ' IF Dialog.OpenFile(FALSE) THEN RETURN
  ' __text = Trim((File.Load(Dialog.Path)))
  ' texttemp = __text
  ' __text = Replace(__text, "<", "&#60 ")
  ' __text = Replace(__text, ">", "&#62 ")
  ' board__.Text = __text
  ' __text = texttemp
  ' texttemp = ""
  ' char_count__.Text = Format(Len(__text), "#,##")

  OpenFileTutorial
END

PUBLIC SUB Board_Init()
  mdlGlobal.pos = 1
  __type_count = 0
  __error = 0
  
  WITH board__
  .SelectAll
  .Format.Color = Color.Black
  .Format.Font.Underline = FALSE
  .Format.Alignment = Align.Justify
  .Refresh
  .Select(mdlGlobal.pos - 1, 1)
  .Format.Color = Color.Blue
  .Format.Font.Underline = TRUE
  .Unselect
  END WITH 
  type_here__.SetFocus
END

PUBLIC SUB Board_First_Char()
  mdlGlobal.char = Mid(mdlGlobal.text, mdlGlobal.pos, 1)
  char_error__.Caption = "0"
  info_char__.Caption = mdlGlobal.char
  info_char__.ForeColor = &HFFFF00&
  speed__.Caption = "0"
END

PUBLIC SUB Form_Activate()
  type_here__.SetFocus
END

PUBLIC SUB start_type___Click()

  IF Len(mdlGlobal.text) = 0 THEN 
    Message.Info("Silahkan buka berkas tutorial")
    RETURN 
  ENDIF 
  
  mdlGlobal.start_type = TRUE
  start_type__.Enabled = FALSE
  stop_type__.Enabled = TRUE
  mn_open.Enabled = FALSE
  null_info
  Board_Init
  Board_First_Char
  __time = 0
  Init_Timer
  
END

PUBLIC SUB Init_Timer()
  start_time__.Caption = Format(Time(Now), "hh:nn:ss")
  __start_time = Time(Now)
  stop_time__.Caption = "00:00:00"
  Timer1.Enabled = TRUE
END

PUBLIC SUB null_info()
  start_time__.Caption = "00:00:00"
  stop_time__.Caption = "00:00:00"
  info_char__.Caption = ""
  char_error__.Caption = "0"
  speed__.Caption = "0"
  char_accuracy__.Caption = "0 %"
END

PUBLIC SUB Form_Close()
  Timer1.Enabled = FALSE
  FMain.Show
  SaveConfig
END

PUBLIC SUB stop_type___Click()

  mdlGlobal.start_type = FALSE
  start_type__.Enabled = TRUE
  stop_type__.Enabled = FALSE
  mn_open.Enabled = TRUE
  Timer1.Enabled = FALSE
  IF __type_count > 0 THEN 
    calculate_speed
    calculate_accuracy
    IF Len(mdlGlobal.text) = __type_count THEN 
      Message.Info("Selesai")
    ELSE 
      Message.Warning("diakhiri oleh pengguna")
    ENDIF 
  ENDIF 
END

PUBLIC SUB calculate_speed()
  DIM speed AS Integer
  
  stop_time__.Caption = Format(CDate(__start_time + Date(0, 0, 0, 0, 0, __time)), "hh:nn:ss")
  speed = __type_count / (__time / 60)
  speed__.Caption = speed
END

PUBLIC SUB calculate_accuracy()
  DIM accuracy AS Integer
  
  accuracy = ((__type_count - __error) / Len(mdlGlobal.text)) * 100
  char_accuracy__.Caption = accuracy & " %"
END

PUBLIC SUB Timer1_Timer()

__time = __time + 1

END

PUBLIC SUB mn_exit_Click()
  ME.Close
END

PUBLIC SUB mn_recent1_Click()

  IF FirstLoad = FALSE THEN
    OpenFileTutorial(RecentFiles[0])
    FirstLoad = TRUE
  ENDIF

END

PUBLIC SUB mn_recent2_Click()
  OpenFileTutorial(RecentFiles[1])
END

PUBLIC SUB mn_recent3_Click()
  OpenFileTutorial(RecentFiles[2])
END

PUBLIC SUB mn_recent4_Click()
  OpenFileTutorial(RecentFiles[3])
END

PUBLIC SUB mn_recent5_Click()
  OpenFileTutorial(RecentFiles[4])
END

PRIVATE SUB OpenFileTutorial(OPTIONAL filePath AS String = "")
  
  DIM texttemp AS String
  DIM iIndex AS Integer
    
  mdlGlobal.text = ""
  texttemp = ""
  iIndex = -1 ' not in recent files
  
  IF filePath <> "" THEN
    IF Exist(filePath) = FALSE THEN
      Message.Warning("File not exist, please choose another file.", "OK")
      filePath = ""
    ENDIF
  ENDIF
  
  IF filePath = "" THEN
    Dialog.Title = "Select tutorial file..."
    Dialog.Filter = ["*", "Text File"]
    
    IF Exist(mdlGlobal.last_open_dir) = FALSE THEN
      mdlGlobal.last_open_dir = User.Home
    ENDIF
    
    Dialog.Path = mdlGlobal.last_open_dir
    IF Dialog.OpenFile(FALSE) THEN
      RETURN
    ENDIF
    
    filePath = Dialog.Path
  ENDIF
  
  IF RecentFiles.Exist(filePath) THEN
      iIndex = RecentFiles.Find(filePath)
      IF iIndex > 0 THEN
        RecentFiles.Remove(iIndex)
      ENDIF
  ENDIF
  
  IF iIndex = -1 AND RecentFiles.Count = 0 THEN
    RecentFiles.Add(filePath)
  ELSE IF (iIndex = -1 AND RecentFiles.Count > 0) OR iIndex > 0 THEN
    RecentFiles.Add(filePath, 0)
  ENDIF
  
  IF RecentFiles.Count > MaxRecentFiles THEN ' make sure RecentFiles.count is only 5
    RecentFiles.Pop()
  ENDIF
  
  IF iIndex = -1 OR iIndex > 0 THEN
    RearrangeSubMenuRecentFiles
  ENDIF
  
  IF mn_recentFiles.Enabled = FALSE THEN
    mn_recentFiles.Enabled = TRUE
  ENDIF
  
  mdlGlobal.last_open_dir = mdlGlobal.DirPath(filePath)
  mdlGlobal.text = Trim((File.Load(filePath)))
  texttemp = mdlGlobal.text
  mdlGlobal.text = Replace(mdlGlobal.text, "<", "&#60 ")
  mdlGlobal.text = Replace(mdlGlobal.text, ">", "&#62 ")
  board__.Text = mdlGlobal.text
  mdlGlobal.text = texttemp
  texttemp = ""
  char_count__.Text = Format(Len(mdlGlobal.text), "#,##")
  
END


PRIVATE SUB LoadConfig()
  
  DIM filePath AS String
  DIM i AS Integer
  
  mdlGlobal.last_open_dir = Settings["Config/LastOpenDir", User.Home]
  IF Exist(mdlGlobal.last_open_dir) = FALSE THEN mdlGlobal.last_open_dir = User.Home
  
  FOR i = 1 TO MaxRecentFiles STEP 1
    filePath = Settings["RecentFiles/File" & i, ""]
    IF Len(filePath) > 0 THEN
      RecentFiles.Add(filePath)
    ELSE
      BREAK
    ENDIF
  NEXT
  
  RecentMenus.Add(mn_recent1)
  RecentMenus.Add(mn_recent2)
  RecentMenus.Add(mn_recent3)
  RecentMenus.Add(mn_recent4)
  RecentMenus.Add(mn_recent5)
  
  IF RecentFiles.Count > 0 THEN
    mn_recentFiles.Enabled = TRUE
    FOR i = 0 TO RecentFiles.Count - 1 STEP 1
      RecentMenus[i].Text = RecentFiles[i]
    NEXT
  ELSE
    mn_recentFiles.Enabled = FALSE
  ENDIF
  
  RearrangeSubMenuRecentFiles
  
END

PRIVATE SUB SaveConfig()
  
  DIM i AS Integer
  Settings["Config/LastOpenDir"] = mdlGlobal.last_open_dir
  FOR i = 1 TO RecentFiles.Count STEP 1
    Settings["RecentFiles/File" & i] = RecentFiles[i - 1]
  NEXT
  
END

PRIVATE FUNCTION RearrangeSubMenuRecentFiles()
  
  DIM i AS Integer
  FOR i = 0 TO RecentFiles.Count - 1 STEP 1
    RecentMenus[i].Text = RecentFiles[i]
    IF RecentMenus[i].Visible = FALSE THEN RecentMenus[i].Visible = TRUE
  NEXT
  
END
